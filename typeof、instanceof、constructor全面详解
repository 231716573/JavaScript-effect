一、typeof详解

  数字(Number)、字符串、布尔值、对象、null、undefined，还有一个特殊的类型function
  这些数据类型构成了js的最底层，通过使用这些数据类型我们就能处理任何的数据、任何的逻辑。
  js是数据宽松型，在定义变量的时候不用指定具体的类型，js在运行时会自动转换为对应的数据类型：
  
  var a=1,name="68kejian.com";
  var obj={};
  var flag=1;
  var c=null;
  var d;
  
  var str=new String('d');
  这个时候str是一个字符串对象类型，声明起来比较麻烦，所以js提供了一种比较方面的方式，就是上面的var定义的方式。
  
  1、typeof检测变量类型
  
  js提供了一个一元运算符typeof，它能检测变量是什么数据类型，使用typeof运算符获取一个值的类型，可能的结果有5种：
  
  ·undefined
  ·boolean
  ·number
  ·string
  ·object
  .function
  
注：typeof null //得到"object"，typeof运算符对于null值会返回"object"。
  
    var a = 1;
    var b = "68kejian.com";
    var c = true;
    var d;
    var e = null;
    var f = function() {
    }
    console.log('变量a的数据类型:' + typeof a);  // number
    console.log('变量b的数据类型:' + typeof b);  // string
    console.log('变量c的数据类型:' + typeof c);  // boolean
    console.log('变量d的数据类型:' + typeof d);  // undefined
    console.log('变量e的数据类型:' + typeof e);  // object
    console.log('变量f的数据类型:' + typeof f);  // function
    
  2、使用方法
    
    typeof a    &&   typeof(a)
    
    typeof返回的结果都是字符串类型的，所以在进行类型判断的时候注意字符串:
    
  3、缺点
  
  对象开发是js的核心部分，我们可以自定义对象。
  有的时候我们自定义了对象并且实例化了，想知道实例化之后的对象的类型，这个时候我们来用typeof检测一下:
  
    function People() {
        this.name = "1";
    }
    function Car() {
        this.name = "1";
    }
    var arr =new Array()
    var p = new People();
    var car = new Car();
    console.log(typeof arr);   //object
    console.log(typeof p);     //object
    console.log(typeof car);   //object
    
    有的时候确实需要确定一个对象的具体的类型，甚至需要确定对象是有哪个构造函数实例化出来的，这个时候typeof就无能为力了。
    
总结:
    typeof检测的结果是固定的，对于对象typeof无法检测出具体的构造函数或者原型。
    
    
二、instanceof详解

  我们已经知道了typeof检测所有的引用类型，返回的结果都是object，普通function函数例外。
  这个时候js引入了instanceof运算符，用来判断一个值具体是由什么构造函数构造出来的。
  
  1、instanceof运算符
  
  instanceof返回的结果是boolean类型。
  
  一个实例：
  
    function People() {
        this.name = "1";
    }
    function Car() {
        this.name = "1";
    }
    var p = new People();
    var car = new Car();
    console.log(p instanceof People);  //true
    console.log(car instanceof People);//false
    
    console.log(p instanceof Car);     //false
    console.log(car instanceof Car);   //true

    console.log(car instanceof Object);//true
    console.log(p instanceof Object);  //true
    
    例子解析：

    1、"p instanceof People"返回true，因为p是由构造函数People实例化出来的.

    2、"p instanceof Car"返回false，因为p不是由构造函数Car实例化出来的.

    3、"p instanceof Object"返回true，因为Object是所有对象的基类，所有的对象都继承Object.
    
    
    另外的一个实例：
    
    var b="68kejian.com";
    var c=new String("68kejian.com");
    console.log(b instanceof String);  //false
    console.log(c instanceof String);  //true
    
    上面实例b是一个原始的数据类型，c是通过String对象实例化的，通过instanceof检测的结果既然不一样。
    这就说明了一点instanceof主要是针对引用类型进行检测，对于原始类型基本不起作用。
    
    
三、constructor详解
    
    js中面向对象的开发主要是通过constructor构造函数来实现的。
    我们知道js中所有的对象都继承Object，constructor是Object的一个不可枚举的属性，那么所有的函数都有这个constructor属性。
    
  constructor属性
  
    1、prototype属性只存在函数中，对象没有
    2、constructor属性函数和对象都有，只不过存放的位置不一样，函数存放在prototype中，对象存在于__proto__
    
  constructor的作用
  
    我们讲解了typeof和instanceof，它们都能检测数据类型，只不过检测的结果不一样。
    在实际项目开发中，特别是涉及到面向对象的开发，我们有的时候需要确定对象是由哪个构造函数实例出来的，
    这个instanceof可以实现，只不过instanceof返回是一个boolean类型，无法获取构造函数的相关信息。
    
    
    
  1、对象中的constructor属性的作用
    
    function People() {
        this.name = "68kejian.com";
    }

    var p = new People();
    console.log("p对象指向的构造函数是："+ p.__proto__.constructor.name);  // People
    console.log("p对象指向的构造函数是："+ p.constructor.name);  // People

    var p1 = new People();
    console.log("p1对象指向的构造函数是："+ p1.__proto__.constructor.name);  // People
    console.log("p1对象指向的构造函数是："+ p1.constructor.name);  // People
    
    代码中 p.__proto__.constructor.name和 p.constructor.name写法一样，
    我们上面已经说过了对象中constructor属性存在于__proto__属性中，这不过这种写法比较麻烦并且 存在浏览器兼容性，
    所以p.constructor.name这种写法比较常见，这种写法js内容自动会指向__proto__属性里面去。
    
    我们实例化了两个对象p和p1，它们的构造函数都是People,这个时候分别打印它们指向的构造函数都是:People。
    既然p和p1的constructor都指向People那么它们的constructor是否相等，我们来验证一下：
    
    function People() {
        this.name = "68kejian.com";
    }
    var p = new People();
    var p1 = new People();
    console.log(p == p1);  //false
    console.log(p.constructor === p1.constructor);  //true
    
    看出了两个对象是不相等的，因为它们不是同一个对象，但是它们的constructor是相等的。
    通过这一点我们就知道了可以通过constructor来验证两个对象是不是同一个构造函数实例化出来的。
    
    
  2、构造函数的consturctor的作用
  
    function People() {
        this.name = "68kejian.com";
    }
    console.log(People.constructor.name);    // Function
    console.log(People.prototype.constructor.name);    // People
    
    People.constructor.name和People.prototype.constructor.name打印的结果既然不一样，为什么哪？
    
    我们知道function其实是由new Function实例化出来的，不过这个是js内容自动创建的。
    所以，People.constructor.name其实就是People.__proto__.constructor.name,我们知道__proto__只有对象才有该属性，
    这里就可以断定People其实也是一个对象，只不过它的构造函数是Function.
    
    
    People.prototype.constructor.name这个是获取构造函数自身的名字，所有的实例化对象的constructor属性都是继承的prototype属性里面的constructor。
    这里我们用实例验证一下：
        
      function People() {
          this.name = "68kejian.com";
      }
      var p = new People();
      console.log(p.constructor.name === People.prototype.constructor.name);//true
      
      这里p.constructor.name === People.prototype.constructor.name是相等的，
      因为p对象的constructor继承了People的prototype属性里面的constructor
