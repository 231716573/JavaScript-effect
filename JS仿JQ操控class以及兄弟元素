//添加绑定事件
addHandler : function (oElement, sEventType, fnHandler){
	return oElement.addEventListener ? oElement.addEventListener(sEventType, fnHandler, false) : oElement.attachEvent("on" + sEventType, fnHandler)
},
//删除绑定事件
removeHandler : function (oElement, sEventType, fnHandler){
	return oElement.removeEventListener ? oElement.removeEventListener(sEventType, fnHandler, false) : oElement.detachEvent("on" + sEventType, fnHandler)
},
//绑定事件到对象
bind : function (object, fnHandler){
	return function ()
	{
		return fnHandler.apply(object, arguments)	
	}
}
//初始化样式
this.initialize.apply(this, arguments);

// 获取class
function getClass(sClass, oParent)
{
	var aClass = [];	
	var reClass = new RegExp("(^| )" + sClass + "( |$)");
	var aElem = (oParent || document).getElementsByTagName("*");
	for (var i = 0; i < aElem.length; i++) reClass.test(aElem[i].className) && aClass.push(aElem[i]);
	return aClass
}
// class是否存在
function hasClass(obj, sClass)
{
	var reg = new RegExp("(^|\\s)" + sClass + "(\\s|$)");
	return reg.test(obj.className)
}
// 添加class
function addClass(obj, sClass)
{
	hasClass(obj, sClass) || (obj.className += " "+sClass)
}
// 删除class
function removeClass(obj, sClass)
{
	if (hasClass(obj, sClass))
	{
		var reg = new RegExp("(^|\\s)" + sClass + "(\\s|$)");
		obj.className = obj.className.replace(reg, "");
	}
}
// 上一个元素
function prevElement(obj)
{
	return obj.previousSibling || obj.previousElementSibling || null	
}
// 下一个元素
function nextElement(obj)
{
	return obj.nextSibling || obj.nextElementSibling || null	
}

//获取ID
var $ = function (id) {return typeof id === "string" ? document.getElementById(id) : id};

//获取tagName
var $$ = function (tagName, oParent) {return (oParent || document).getElementsByTagName(tagName)};

