1）构造函数、原型和实例的关系

    ①构造函数都有一个属性prototype，这个属性是一个对象（Object的实例）
    ②原型对象prototype里面有一个constructor属性，该属性指向原型对象所属的构造函数
    ③实例对象都有一个_proto_属性，该属性也指向构造函数的原型对象，它是一个非标准属性，不可以用于编程，它是用于浏览器自己使用的
2）prototype与_proto_的关系

    ①prototype是构造函数的属性
    ②_proto_是实例对象的属性

                ——这两者都指向同一个对象
                

function Person(name){
	this.name = name;
}
Person.prototype.showName = function(){
	console.log(this.name);
}
function Student(name, age){
	Person.call(this,name);
	this.age = age;
}
Student.prototype = new Person();
Student.prototype.contructor = Student;
Student.prototype.showAge = function(){
	console.log(this.age);
}
var stu = new Student("张三",12);
console.log(stu.__proto__ == Student.prototype) //true
console.log(stu.__proto__ == Person.prototype) //false
console.log(Student.prototype.__proto__ == Person.prototype) //true
console.log(Student.prototype.__proto__ == Object.prototype) //false
console.log(Person.prototype.__proto__ == Object.prototype) //true
console.log(Object.prototype.__proto__); //null

//我们把这个有__proto__串起来的直到Object.prototype.__proto__为null的链叫做原型链
